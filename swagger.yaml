openapi: 3.0.3
info:
  title: Aftermeal API Docs
  description: 에프터밀 API 엔드포인트(Endpoint)와 객체 정보, 파라미터, 요청 및 응답 예제를 살펴보세요.
  version: 1.0.0

servers:
  - url: https://api.aftermeal.online/v1
    description: Production API Server
  - url: https://dev-api.aftermeal.online/v1
    description: Dev API Server

tags:
  - name: Users
    description: 사용자 관리 관련 엔드포인트
  - name: Activities
    description: 활동 관리 관련 엔드포인트
  - name: Activity Schedules
    description: 활동 일정 관리 관련 엔드포인트
  - name: Participations
    description: 참가 관리 관련 엔드포인트
  - name: Authentication
    description: 인증 관련 엔드포인트

paths:
  /users:
    get:
      tags:
        - Users
      summary: 사용자 목록 조회
      responses:
        '200':
          description: Successful response
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserListResponse'

  /users/{userId}:
    put:
      tags:
        - Users
      summary: 사용자 수정
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully

    delete:
      tags:
        - Users
      summary: 사용자 삭제
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully

  /activities:
    get:
      tags:
        - Activities
      summary: 활동 목록 조회
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityListResponse'

    post:
      tags:
        - Activities
      summary: 활동 생성
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityCreatationRequest'
      responses:
        '201':
          description: Activity created successfully

  /activities/{activityId}:
    put:
      tags:
        - Activities
      summary: 활동 수정
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityUpdateRequest'
      responses:
        '200':
          description: Activity updated successfully

    delete:
      tags:
        - Activities
      summary: 활동 삭제
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Activity deleted successfully

  /activity-schedules:
    get:
      tags:
        - Activity Schedules
      summary: 활동 일정 목록 조회
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityScheduleListResponse'

  /activity-schedules/{activityScheduleId}:
    get:
      tags:
        - Activity Schedules
      summary: 활동 일정 상세 조회
      parameters:
      - name: activityScheduleId
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityScheduleResponse'

  /activity-schedules/{activityScheduleId}/status:
    patch:
      tags:
        - Activity Schedules
      summary: 활동 일정 상태 수정
      parameters:
      - name: activityScheduleId
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityScheduleStatusUpdate'
      responses:
        '200':
          description: Activity updated successfully

  /participations/{participationId}/exclude:
    post:
      tags:
        - Participations
      summary: 참가자 제외
      parameters:
        - name: participationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Participation request excluded successfully

  /auth/login:
    post:
      tags:
        - Authentication
      summary: 로그인
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

components:
  schemas:
    UserListResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string
            enum: [USER, ADMIN]
        type:
          type: string
          enum: [STUDENT, TEACHER]
        status:
          type: string
          enum: [ACTIVATE, DEACTIVATE]
        generationNumber:
          type: integer

    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [STUDENT, TEACHER]
        status:
          type: string
          enum: [ACTIVATE, DEACTIVATE]
        generationNumber:
          type: integer

    ActivityListResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        location:
          type: string
          enum: [AUDITORIUM, GROUND]
        maxParticipants:
          type: integer

    ActivityCreatationRequest:
      type: object
      properties:
        name:
          type: string
        maxParticipants:
          type: integer
        location:
          type: string
          enum: [AUDITORIUM, GROUND]

    ActivityUpdateRequest:
      type: object
      properties:
        name:
          type: string
        maxParticipants:
          type: integer
        location:
          type: string
          enum: [AUDITORIUM, GROUND]

    ActivityScheduleListResponse:
      type: object
      properties:
        activityScheduleId:
          type: integer
        name:
          type: string
        maxParticipants:
          type: integer
        currentParticipants:
          type: integer
        status:
          type: string
          enum: [SCHEDULED, IN_PROGRESS, CANCELED, COMPLETED]
        type:
          type: string
          enum: [LUNCH, DINNER]
        scheduledDate:
          type: string
          format: date

    ActivityScheduleResponse:
      type: object
      properties:
        activityScheduleId:
          type: integer
        name:
          type: string
        maxParticipants:
          type: integer
        status:
          type: string
          enum: [SCHEDULED, IN_PROGRESS, CANCELED, COMPLETED]
        type:
          type: string
          enum: [LUNCH, DINNER]
        scheduledDate:
          type: string
          format: date
        participants:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              displayName:
                type: string

    ActivityScheduleStatusUpdate:
      type: object
      properties:
        status:
          type: string
          enum: [SCHEDULED, IN_PROGRESS, CANCELED, COMPLETED]

    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
        expiredIn:
          type: integer
        refreshToken:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            roles:
              type: array
              items:
                type: string
                enum: [USER, ADMIN]